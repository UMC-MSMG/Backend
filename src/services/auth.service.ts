import { KakaoLoginResponseDto } from "../dtos/auth.dto";
import coolsms from "coolsms-node-sdk";
import {
  AuthRepository,
  updateRefreshToken,
} from "../repositories/auth.repository";
import dotenv from "dotenv";
import { VerificationData } from "../types/auth.types";
import { generateAccessToken, generateRefreshToken } from "../jwt";

dotenv.config();

export class AuthService {
  static async processKakaoLogin(user: any): Promise<KakaoLoginResponseDto> {
    try {
      if (!user) {
        throw new Error("Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Ïã§Ìå®");
      }
      console.log("Ïπ¥Ïπ¥Ïò§ Ïú†Ï†Ä", user);
      console.log("id: ", user.user.id);

      return {
        message: "Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ",
        user: {
          id: user.user.id,
          name: user.user.name,
          image: user.user.image,
        },
        newUser: user.newUser,
        accessToken: user.accessToken,
        refreshToken: user.refreshToken,
      };
    } catch (error) {
      console.error("Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
      throw new Error("Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Ïã§Ìå®");
    }
  }
}

// @ts-ignore
const mysms = coolsms.default;

const messageService = new mysms(
  process.env.SMS_API_KEY as string,
  process.env.SMS_API_SECRET as string
);

//ÎûúÎç§ Ïà´Ïûê 6ÏûêÎ¶¨ ÏÉùÏÑ± Ìï®Ïàò
const generateVerificationCode = (): string => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

//Ïù∏Ï¶ù ÏΩîÎìú Í∞ùÏ≤¥ ÏÉùÏÑ±
const verificationCode = new Map<string, VerificationData>();

//export Ìï®Ïàò
export const VerificationService = {
  //Ïù∏Ï¶ù ÏΩîÎìú Ï†ÑÏÜ° Ìï®Ïàò
  sendCode: async (phoneNum: string) => {
    const code = generateVerificationCode();
    const expiresAt = Date.now() + 5 * 60 * 1000;

    //Í∏∞Ï°¥ Ï°¥Ïû¨ÌïòÎäî Ïù∏Ï¶ù Î≤àÌò∏ ÏÇ≠Ï†ú
    if (verificationCode.has(phoneNum)) {
      clearTimeout(verificationCode.get(phoneNum)!.timeoutId); // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏ Ï†úÍ±∞
      verificationCode.delete(phoneNum);
    }

    // 5Î∂ÑÌõÑ Î©îÎ™®Î¶¨ÏóêÏÑú ÏûêÎèô ÏÇ≠Ï†úÌïòÎäî ÏΩîÎìú
    const timeoutId = setTimeout(
      () => {
        verificationCode.delete(phoneNum);
        console.log(`‚è≥ ${phoneNum}Ïùò Ïù∏Ï¶ù ÏΩîÎìúÍ∞Ä ÏûêÎèô ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.`);
      },
      5 * 60 * 1000
    ); //5Î∂Ñ

    verificationCode.set(phoneNum, { code, expiresAt, timeoutId });

    try {
      const response = await messageService.sendOne({
        to: phoneNum,
        from: process.env.PHONE as string,
        text: `[ÎßåÏàòÎ¨¥Í∞ï] Ïù∏Ï¶ùÎ≤àÌò∏: ${code}`,
        autoTypeDetect: true,
      });
      console.log(`üì© ${phoneNum}Î°ú Ïù∏Ï¶ùÎ≤àÌò∏ Ï†ÑÏÜ°: ${code}`, response);
      return { success: true, message: "Ïù∏Ï¶ùÎ≤àÌò∏Í∞Ä Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§." };
    } catch (error) {}
  },
  //
  verifyLoginCode: async (phoneNum: string, code: string) => {
    const storedData = verificationCode.get(phoneNum);
    // @ts-ignore
    console.log(
      Array.from(verificationCode.entries()).map(([phoneNum, data]) => ({
        phoneNum,
        ...data,
      }))
    );

    if (!storedData) {
      return { success: false, message: "Ïù∏Ï¶ùÎ≤àÌò∏Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§." };
    }
    const { code: storedCode, expiresAt, timeoutId } = storedData;
    if (Date.now() > expiresAt) {
      verificationCode.delete(phoneNum);
      clearTimeout(timeoutId); // ÌÉÄÏù¥Î®∏ Ï†úÍ±∞
      return {
        success: false,
        message: "Ïù∏Ï¶ùÎ≤àÌò∏Í∞Ä ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú ÏöîÏ≤≠ÌïòÏÑ∏Ïöî.",
      };
    }
    if (storedCode !== code) {
      return { success: false, message: "Ïù∏Ï¶ùÎ≤àÌò∏Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§." }; // üöÄ Ïó¨Í∏∞ÏÑú throw ÎåÄÏã† Í∞ùÏ≤¥ Î∞òÌôò
    }
    verificationCode.delete(phoneNum);
    clearTimeout(timeoutId);
    const user = await AuthRepository.findPhoneNum(phoneNum);
    return {
      success: true,
      message: "Ïù∏Ï¶ùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.",
      userId: user?.id,
    };
  },
  //ÌöåÏõêÍ∞ÄÏûÖ Ïù∏Ï¶ù
  verifySignupCode: async (phoneNum: string, code: string) => {
    const storedData = verificationCode.get(phoneNum);
    // @ts-ignore
    console.log(
      Array.from(verificationCode.entries()).map(([phoneNum, data]) => ({
        phoneNum,
        ...data,
      }))
    );

    if (!storedData) {
      throw { statusCode: 400, message: "Ïù∏Ï¶ùÎ≤àÌò∏Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.." };
    }
    const { code: storedCode, expiresAt, timeoutId } = storedData;
    if (Date.now() > expiresAt) {
      verificationCode.delete(phoneNum);
      clearTimeout(timeoutId); // ÌÉÄÏù¥Î®∏ Ï†úÍ±∞
      throw { statusCode: 400, message: "Ïù∏Ï¶ùÎ≤àÌò∏Í∞Ä ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§." };
    }
    if (storedCode !== code) {
      throw { statusCode: 400, message: "Ïù∏Ï¶ùÎ≤àÌò∏Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§." };
    }
    verificationCode.delete(phoneNum);
    clearTimeout(timeoutId);
    const userId = await AuthRepository.createUserByPhone(phoneNum);
    if (!userId) {
      throw { statusCode: 500, message: "ÏÑúÎ≤Ñ ÏóêÎü¨" };
    }
    return {
      userId,
    };
  },
  // Ï°¥Ïû¨ÌïòÎäî Ï†ÑÌôîÎ≤àÌò∏Ïù∏ÏßÄ ÌôïÏù∏ÌïòÍ∏∞
  isPhoneNum: async (phoneNum: string) => {
    const user = await AuthRepository.findPhoneNum(phoneNum);
    if (!user) {
      return false;
    } else {
      return true;
    }
  },
  handleToken: async (userId: number) => {
    const accessToken = generateAccessToken(userId);
    const refreshToken = generateRefreshToken(userId);
    console.log("ÏÑúÎπÑÏä§ Ïú†Ï†Ä ÏïÑÏù¥Îîî", userId);
    await updateRefreshToken(userId, refreshToken);
    return { user_id: userId, accessToken, refreshToken };
  },
  test: async (phoneNum: string) => {
    console.log("Ïó¨Í∏∞Í∏∞Í∏∞Í∏∞„Ö£");
    return await AuthRepository.createUserByPhone(phoneNum);
  },
};
